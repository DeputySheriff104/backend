swagger: "2.0"
info:
  description: "Food delivery API"
  version: "0.1.0"
  title: "Food delivery"
host: "127.0.0.1:8080"
basePath: "/api"
tags:
  - name: "dish"
    description: "Operations about dish"
  - name: "order"
    description: "Operations about order"
  - name: "restaurant"
    description: "Operations about restaurant"
  - name: "user"
    description: "Operations about user"
schemes:
  - "https"
  - "http"
paths:
  /dishes:
    post:
      tags:
        - "dish"
      summary: "Create dish"
      description: "This can only be done by the logged in user."
      operationId: "createDish"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Dish object that should be created"
          required: true
          schema:
            $ref: "#/definitions/NewDish"
      responses:
        201:
          description: "Dish was successfully created"
          schema:
            $ref: "#/definitions/CreatedDish"
        400:
          description: "Data is invalid"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /dishes/{dishId}:
    put:
      tags:
        - "dish"
      summary: "Update an existing dish"
      description: "This can only be done by the logged in user."
      operationId: "updateDish"
      produces:
        - "application/json"
      parameters:
        - name: "dishId"
          in: "path"
          description: "ID of dish to update"
          required: true
          type: "integer"
          format: "int64"
      responses:
        201:
          description: "Dish was successfully updated"
          schema:
            $ref: "#/definitions/UpdatableDish"
        400:
          description: "Data is invalid"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

    get:
      tags:
        - "dish"
      summary: "Get an existing dish"
      description: "This can only be done by the logged in user."
      operationId: "getDish"
      produces:
        - "application/json"
      parameters:
        - name: "dishId"
          in: "path"
          description: "ID of dish to get"
          required: true
          type: "integer"
          format: "int64"
      responses:
        201:
          description: "Dish was successfully returned"
          schema:
            $ref: "#/definitions/CreatedDish"
        400:
          description: "Data is invalid"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

    delete:
      tags:
        - "dish"
      summary: "Delete an existing dish"
      description: "This can only be done by the logged in user."
      operationId: "deleteDish"
      parameters:
        - name: "dishId"
          in: "path"
          description: "ID of dish to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        201:
          description: "Dish was successfully deleted"
        400:
          description: "Data is invalid"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /orders:
    post:
      tags:
        - "order"
      summary: "Create order"
      description: "This can only be done by the logged in user."
      operationId: "createOrder"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Order object that should be created"
          required: true
          schema:
            $ref: "#/definitions/NewOrder"
      responses:
        201:
          description: "Order successfully create"
          schema:
            $ref: "#/definitions/CreatedOrder"
        400:
          description: "Data is invalid"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

    /orders/{id}:
      get:
        tags:
          - "order"
        summary: "Find order  by id"
        description: "Search the order  using id"
        operationId: "searchOrderById"
        produces:
          - "application/json"
        parameters:
          - name: "id"
            in: "path"
            description: "ID of order to return"
            required: true
            type: "integer"
            format: "int64"
        responses:
          201:
            description: "Order successfully find"
            schema:
              $ref: "#/definitions/CreatedOrder"
          400:
            description: "Data is invalid"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/ErrorResponse"
          401:
            description: "Unauthorized"
          403:
            description: "Forbidden"
          404:
            description: "Order not found"
      delete:
        tags:
          - "order"
        summary: "Delete order  by id"
        description: "Delete the order  using id"
        operationId: "deleteOrderByid"
        produces:
          - "application/json"
        parameters:
          - name: "id"
            in: "path"
            description: "ID of order to delete"
            required: true
            type: "integer"
            format: "int64"
        responses:
          "200":
            description: "Succesfull deletion"
          400:
            description: "Data is invalid"
            schema:
              type: "array"
              items:
                $ref: "#/definitions/ErrorResponse"
          "404":
            description: "Order not found"

      put:
        tags:
          - "order"
        summary: "Update order"
        description: "This can only be done by the logged in user."
        operationId: "updateOrder"
        produces:
          - "application/json"
        parameters:
          - name: "id"
            in: "path"
            description: "id that need to be updated"
            required: true
            type: "integer"
            format: "int64"
          - in: "body"
            name: "body"
            description: "Status object that should be created"
            required: true
            schema:
              $ref: "#/definitions/UpdatableOrder"




        responses:
          "201":
            description: "Order successfully find"
            schema:
              $ref: "#/definitions/CreatedOrder"
          "400":
            description: "Invalid order supplied"
          "404":
            description: "Order not found"

  /restaurants:
    post:
      tags:
        - "restaurant"
      summary: "Create restaurant"
      description: "This can only be done by the logged in user."
      operationId: "createRestaurant"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Restaurant object that should be created"
          required: true
          schema:
            $ref: "#/definitions/NewRestaurant"
      responses:
        201:
          description: "Restaurant successfully create"
          schema:
            $ref: "#/definitions/CreatedRestaurant"
        400:
          description: "Data is invalid"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

  /users:
    post:
      tags:
        - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User object that should be created"
          required: true
          schema:
            $ref: "#/definitions/NewUser"
      responses:
        201:
          description: "User successfully create"
          schema:
            $ref: "#/definitions/CreatedUser"
        400:
          description: "Data is invalid"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ErrorResponse"
        401:
          description: "Unauthorized"
        403:
          description: "Forbidden"

definitions:
  NewDish:
    type: "object"
    required:
      - "mainDishInfo"
      - "dishType"
      - "dishCalories"
      - "dishCookingTimeMinutes"
    properties:
      mainDishInfo:
        type: object
        properties:
          dishName:
            type: "string"
            minLength: 1
            maxLength: 64
            example: "Lasagna"
          dishPrice:
            type: "integer"
            format: "int64"
            minimum: 1
            example: 250
      dishType:
        type: "string"
        enum:
          - DRINK
          - MAIN
          - SALAD
          - SANDWICH
          - BURGER
          - DESSERT
          - PIZZA
          - SUSHI
          - BAKERY
        example: "MAIN"
      dishCalories:
        type: "integer"
        format: "int64"
        minimum: 1
        example: 175
      dishCookingTimeMinutes:
        type: "integer"
        format: "int64"
        minimum: 1
        example: 30

  UpdatableDish:
    type: "object"
    required:
      - "mainDishInfo"
      - "dishType"
      - "dishCalories"
      - "dishCookingTimeMinutes"
    properties:
      mainDishInfo:
        type: object
        properties:
          dishName:
            type: "string"
            minLength: 1
            maxLength: 64
            example: "Lasagna"
          dishPrice:
            type: "integer"
            format: "int64"
            minimum: 1
            example: 250
      dishType:
        type: "string"
        enum:
          - DRINK
          - MAIN
          - SALAD
          - SANDWICH
          - BURGER
          - DESSERT
          - PIZZA
          - SUSHI
          - BAKERY
        example: "MAIN"
      dishCalories:
        type: "integer"
        format: "int64"
        minimum: 1
        example: 175
      dishCookingTimeMinutes:
        type: "integer"
        format: "int64"
        minimum: 1
        example: 30

  CreatedDish :
    type: object
    required:
      - "dishId"
      - "mainDishInfo"
      - "dishType"
      - "dishCalories"
      - "dishCookingTimeMinutes"
    properties:
      dishId:
        type: "integer"
        format: "int64"
        minimum: 1
      mainDishInfo:
        type: object
        properties:
          dishName:
            type: "string"
            minLength: 1
            maxLength: 64
            example: "Lasagna"
          dishPrice:
            type: "integer"
            format: "int64"
            minimum: 1
      dishType:
        type: "string"
        enum:
          - DRINK
          - MAIN
          - SALAD
          - SANDWICH
          - BURGER
          - DESSERT
          - PIZZA
          - SUSHI
          - BAKERY
        example: "MAIN"
      dishCalories:
        type: "integer"
        format: "int64"
        minimum: 1
      dishCookingTimeMinutes:
        type: "integer"
        format: "int64"
        minimum: 1
        example: 30

  NewOrder:
    type: "object"
    required:
      - "userInfo"
      - "listOfDishes"
      - "check"
    properties:
      createdAt:
        type: "string"
        format: "date-time"
        example: "2020-07-13T10:30:00Z"
      status:
        type: "string"
        minLength: 1
        example: "Заказ готовится"
      userInfo:
        type: "object"
        properties:
          firstName:
            type: "string"
            description: "First name of the user"
            minLength: 1
            maxLength: 50
          lastName:
            type: "string"
            description: "Last name of the user"
            minLength: 1
            maxLength: 50
          phone:
            type: "string"
            maxLength: 15
      listOfDishes:
        type: array
        items:
          type: "string"


    CreatedOrder:
      type: "object"
      required:
        - "createdAt"
        - "orderId"
        - "userInfo"
        - "listOfDishes"
        - "check"
      properties:
        orderId:
          type: "integer"
          format: "int64"
          minimum: 1
        createdAt:
          type: "string"
          format: "date-time"
          example: "2020-07-13T10:30:00Z"
        status:
          type: "string"
          minLength: 1
          example: "Заказ готовится"
        userInfo:
          type: "object"
          properties:
            firstName:
              type: "string"
              description: First name of the user
              minLength: 1
              maxLength: 50
            lastName:
              type: "string"
              description: Last name of the user
              minLength: 1
              maxLength: 50
            phone:
              type: "string"
              maxLength: 15
        listOfDishes:
          type: array
          items:
            type: "string"
        check:
          type: "number"
          format: "double"
    UpdatableOrder:
      type: "object"
      properties:
        userInfo:
          type: "object"
          properties:
            firstName:
              type: "string"
              description: First name of the user
              minLength: 1
              maxLength: 50
            lastName:
              type: "string"
              description: Last name of the user
              minLength: 1
              maxLength: 50
            phone:
              type: "string"
              maxLength: 15
        listOfDishes:
          type: array
          items:
            type: "string"
        status:
          type: "object"
          properties:
            status:
              type: "string"
              description: First name of the user
              minLength: 1
              maxLength: 50

        
  NewRestaurant:
    type: "object"
    required:
      - "restaurantName"
      - "address"
      - "workingHours"
      - "listOfDishes"
      - "restaurantType"
    properties:
      restaurantName:
        type: "string"
        minLength: 1
        maxLength: 255
        example: "Папин сибиряк"
      address:
        type: object
        properties:
          street:
            type: "string"
            minLength: 1
            maxLength: 255
            example: "Плехановская"
          building:
            type: "string"
            minLength: 1
            maxLength: 10
            example: "6A"
      workingHours:
        type: object
        properties:
          beginingWorkDay:
            type: "string"
            format: "date-time"
            example: "2020-07-13T10:00:00Z"
          endWorkDay:
            type: "string"
            format: "date-time"
            example: "2020-07-13T22:00:00Z"
      listOfDishes:
        type: array
        items:
          $ref: "#/definitions/CreatedDish"
      restaurantType:
        type: "string"
        enum:
          - BAR
          - PIZZERIA
          - BURGER
          - DUMPLINGS
          - SUSHI
          - BAKERY
          - RUSSIAN
          - ITALIAN
          - CHINESE
          - GEORGIAN
          - ARMENIAN
        example: "DUMPLINGS"

  CreatedRestaurant:
    type: object
    required:
      - "restaurantId"
      - "restaurantName"
      - "address"
      - "workingHours"
      - "listOfDishes"
      - "restaurantType"
    properties:
      restaurantId:
        type: "integer"
        format: "int64"
        minimum: 1
      restaurantName:
        type: "string"
        minLength: 1
        maxLength: 255
        example: "Папин сибиряк"
      address:
        type: object
        properties:
          street:
            type: "string"
            minLength: 1
            maxLength: 255
            example: "Плехановская"
          building:
            type: "string"
            minLength: 1
            maxLength: 10
            example: "6A"
      workingHours:
        type: object
        properties:
          beginingWorkDay:
            type: "string"
            format: "date-time"
            example: "2020-07-13T10:00:00Z"
          endWorkDay:
            type: "string"
            format: "date-time"
            example: "2020-07-13T22:00:00Z"
      listOfDishes:
        type: array
        items:
          $ref: "#/definitions/CreatedDish"
      restaurantType:
        type: "string"
        enum:
          - BAR
          - PIZZERIA
          - BURGER
          - DUMPLINGS
          - SUSHI
          - BAKERY
          - RUSSIAN
          - ITALIAN
          - CHINESE
          - GEORGIAN
          - ARMENIAN
        example: "DUMPLINGS"

  NewUser:
    type: "object"
    required:
      - "username"
      - "password"
      - "role"
      - "personalInfo"
    properties:
      username:
        type: "string"
        minLength: 8
        maxLength: 64
        example: "John"
      password:
        type: "string"
        minLength: 8
        maxLength: 128
      role:
        type: "string"
        enum:
          - ADMIN
          - COURIER
          - CLIENT
      personalInfo:
        type: object
        properties:
          firstName:
            type: "string"
            description: First name of the user
            minLength: 1
            maxLength: 50
          lastName:
            type: "string"
            description: Last name of the user
            minLength: 1
            maxLength: 50
          phone:
            type: "string"
            maxLength: 15
          email:
            type: "string"
            maxLength: 128
      createdAt:
        type: "string"
        format: "date-time"
        example: "2020-07-13T10:30:00Z"
      createdBy:
        type: "integer"
        format: "int64"
        minimum: 1
      listOfOrders:
        type: array
        items:
          $ref: "#/definitions/CreatedOrder"

  CreatedUser:
    type: "object"
    required:
      - "userId"
      - "username"
      - "role"
      - "personalInfo"
      - "listOfOrders"
    properties:
      userId:
        type: "integer"
        format: "int64"
        minimum: 1
      username:
        type: "string"
        minLength: 8
        maxLength: 64
        example: "John"
      role:
        type: "string"
        enum:
          - ADMIN
          - COURIER
          - CLIENT
      personalInfo:
        type: object
        properties:
          firstName:
            type: "string"
            description: First name of the user
            minLength: 1
            maxLength: 50
          lastName:
            type: "string"
            description: Last name of the user
            minLength: 1
            maxLength: 50
          phone:
            type: "string"
            maxLength: 15
          email:
            type: "string"
            maxLength: 128
      createdAt:
        type: "string"
        format: "date-time"
        example: "2020-07-13T10:30:00Z"
      createdBy:
        type: "integer"
        format: "int64"
        minimum: 1
      listOfOrders:
        type: array
        items:
          $ref: "#/definitions/CreatedOrder"

  ErrorResponse:
    type: "object"
    properties:
      code:
        type: "string"
      description:
        type: "string"
      payload:
        type: "object"

