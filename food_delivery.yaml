swagger: "2.0"
info:
  description: "Food delivery API"
  version: "0.1.0"
  title: "Food delivery"
host: "127.0.0.1:8080"
basePath: "/api"
tags:
- name: "user"
  description: "Operations about user"
schemes:
- "https"
- "http"
paths:
  /users:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object that should be created"
        required: true
        schema:
          $ref: "#/definitions/NewUser"
      responses:
        201:
          description: User successfully create
          schema: 
            $ref: "#/definitions/CreatedUser"
        400:
          description: Data is invalid
          schema:
            type: "array"
            items:
              $ref: "#/definitions/ErrorResponse"
        401:
          description: Unauthorized
        403:
          description: Forbidden
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        "400":
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "400":
          description: "Invalid user supplied"
        "404":
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        "400":
          description: "Invalid username supplied"
        "404":
          description: "User not found"
definitions:
  NewUser:
    type: "object"
    properties:
      username:
        type: "string"
        required: true
        minLength: 5
        maxLength: 64
        example: "John"
      pass:
        type: "string"
        required: true
        minLength: 8
        maxLength: 128
        example: "password"
      role:
        type: "string"
        required: true
        enum:
        - ADMIN
        - COURIER
        - CLIENT
        example: "ADMIN"
      personalInfo:
        type: object
        properties:
          firstName:
            type: "string"
            required: true
            description: First name of the user
            minLength: 1
            maxLength: 50
          lastName:
            type: "string"
            required: true
            minLength: 1
            maxLength: 50
          email:
            type: "string"
            minLength: 5
          phone:
            type: "string"
            maxLength: 15
  CreatedUser:
    type: object
    properties:
      id:
        type: "integer"
        format: "int64"
        minimum: 1
      username:
        type: "string"
        required: true
        minLength: 5
        maxLength: 64
        example: "John"
      role:
        type: "string"
        required: true
        enum:
        - ADMIN
        - COURIER
        - CLIENT
        example: "ADMIN"
      personalInfo:
        type: object
        properties:
          firstName:
            type: "string"
            required: true
            description: First name of the user
            minLength: 1
            maxLength: 50
          lastName:
            type: "string"
            required: true
            minLength: 1
            maxLength: 50
          email:
            type: "string"
            minLength: 5
          phone:
            type: "string"
            maxLength: 15
      createdAt:
        type: "string"
        format: "date-time"
        example: "2020-07-13T10:30:002"
      createdBy:
        type: "integer"
        format: "int64"
        minimum: 1
  ErrorResponse:
    type: "object"
    properties:
      code:
        type: "string"
        required: true
      description:
        type: "string"
      payload:
        type: "object"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
